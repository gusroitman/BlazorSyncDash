@page "/dashboard3"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Calendars

@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@namespace Dashboard3
@* Add a Namespace for a syncfusion control used in Diagrm HTML node *@
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Maps
@* Initialize Diagram with node template *@

<SfDiagramComponent Height="100%" Nodes="@nodes" Connectors="@Connectors" Width="100%">

    <SnapSettings Constraints="SnapConstraints.None"></SnapSettings>
    <PageSettings Height="1500" 
                  Width="1200" 
                  MultiplePage="true" 
                  Orientation="@orientation" 
                  BoundaryConstraints="@boundaryConstraints" 
                  ShowPageBreaks="true">
        <BackgroundStyle Background="lightblue"/>
        <PageMargin Left="10" Top="10" Bottom="10"/>        
    </PageSettings>
    <Layout Type="LayoutType.ComplexHierarchicalTree" @bind-HorizontalSpacing="@HorizontalSpacing" @bind-VerticalSpacing="@VerticalSpacing">
    </Layout>
    <DiagramTemplates>
        <NodeTemplate>
            @{
                if ((context as Syncfusion.Blazor.Diagram.Node).ID == "node4")
                {
                    <SfCircularGauge Width="400px" Height="400px">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="210" EndAngle="150" Minimum="0" Maximum="120" Radius="80%">
                                <CircularGaugeAxisLineStyle Width="10" Color="transparent">
                                </CircularGaugeAxisLineStyle>
                                <CircularGaugeAxisLabelStyle UseRangeColor="false">
                                    <CircularGaugeAxisLabelFont Size="12px" FontFamily="Roboto" FontStyle="Regular">
                                    </CircularGaugeAxisLabelFont>
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Height="10" Offset="5" UseRangeColor="false">
                                </CircularGaugeAxisMajorTicks>
                                <CircularGaugeAxisMinorTicks Height="0" Width="0" UseRangeColor="false">
                                </CircularGaugeAxisMinorTicks>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Radius="30%" Angle="0" ZIndex="1" Content="Speedometer">
                                        <ContentTemplate>
                                            <div><span style="font-size:14px; color:#9E9E9E; font-family:Regular; margin-left: -33px">Speedometer</span></div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                    <CircularGaugeAnnotation Radius="40%" Angle="180" ZIndex="1" Content="65 MPH">
                                        <ContentTemplate>
                                            <div><span style="font-size:20px; color:#424242; font-family:Regular; margin-left: -33px">65 MPH</span></div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                                <CircularGaugeRanges>
                                    <CircularGaugeRange Start="0" End="40" Color="#30B32D" StartWidth="10" EndWidth="10" RoundedCornerRadius="0">
                                    </CircularGaugeRange>
                                    <CircularGaugeRange Start="40" End="80" Color="#FFDD00" StartWidth="10" EndWidth="10" RoundedCornerRadius="0">
                                    </CircularGaugeRange>
                                    <CircularGaugeRange Start="80" End="120" Color="#F03E3E" StartWidth="10" EndWidth="10" RoundedCornerRadius="0">
                                    </CircularGaugeRange>
                                </CircularGaugeRanges>
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="65" Radius="60%" PointerWidth="8">
                                        <CircularGaugePointerAnimation Enable="true"></CircularGaugePointerAnimation>
                                        <CircularGaugeCap Radius="7">
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="18%">
                                        </CircularGaugeNeedleTail>
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                }
                if ((context as Syncfusion.Blazor.Diagram.Node).ID == "node2")
                {
                    <div class="calender-section">
                        <div id="calender-control">
                            <SfCalendar TValue="DateTime?" @bind-Value="@DropVal"></SfCalendar>
                        </div>
                        <div id="display_date">
                            <span id="date_value">Selected values: @(DropVal?.ToString("M/d/yyyy"))</span>
                        </div>
                    </div>
                }
                if ((context as Syncfusion.Blazor.Diagram.Node).ID == "node3")
                { <div class="control_wrapper">
                        <SfTreeView TValue="TreeItem">
                            <TreeViewFieldsSettings DataSource="@TreeDataSource" Id="NodeId" Text="NodeText" Expanded="Expanded" Child="@("Child")"></TreeViewFieldsSettings>
                        </SfTreeView>
                    </div>
                }
                    if ((context as Syncfusion.Blazor.Diagram.Node).ID == "node5")
                {
                    <div class="control-section">
                        <div class="row">
                            <div class="col-lg-6 col-md-6">
                                <SfCard ID="BasicCard">
                                    <CardHeader Title="Debunking Five Data Science Myths" />
                                    <CardContent Content="Tech evangelists are currently pounding their pulpits about all things AI, machine learning, analytics—anything that sounds" />
                                    <CardFooter>
                                        <CardFooterContent>
                                            <SfButton CssClass="e-btn e-outline e-primary">Read More</SfButton>
                                        </CardFooterContent>
                                    </CardFooter>
                                </SfCard>
                                <SfCard ID="NewIconCard">
                                    <div class="newIcon">NEW</div>
                                    <CardHeader Title="Debunking Five Data Science Myths" />
                                    <CardContent Content="Tech evangelists are currently pounding their pulpits about all things AI, machine learning, analytics—anything that sounds" />
                                </SfCard>
                            </div>
                            <div class="col-lg-6 col-md-6">
                                <SfCard ID="SideCard">
                                    <CardImage Image="images/cards/basic.png" />
                                    <CardHeader Title="Debunking Five Data Science Myths" />
                                    <CardContent Content="Tech evangelists are currently pounding their pulpits about all things AI, machine learning, analytics—anything that sounds" />
                                    <CardFooter>
                                        <CardFooterContent>
                                            <SfButton CssClass="e-btn e-outline e-primary">Read More</SfButton>
                                        </CardFooterContent>
                                    </CardFooter>
                                </SfCard>
                            </div>
                        </div>
                    </div>
                }
            }
        </NodeTemplate>
    </DiagramTemplates>
</SfDiagramComponent>

<style>
    #BasicCard, #NewIconCard {
        height: 180px;
        margin: 16px;
    }

    #SideCard {
        height: 376px;
        margin: 16px;
    }

    .e-card > .e-card-image {
        background-repeat: no-repeat;
        min-height: 205px;
    }

    .newIcon {
        background: #2CC000;
        border-radius: 12px;
        border-radius: 12px;
        font-family: HelveticaNeue-Medium, 'Segoe UI';
        font-weight: 500;
        color: #ffffff;
        margin-left: 16px;
        font-size: 14px;
        width: 58px;
        height: 24px;
        display: flex;
        justify-content: center;
        align-items: center;
        letter-spacing: 0.4px;
    }

    .row {
        width: 80%;
        margin: auto;
    }

    .e-btn {
        margin-left: 4px;
    }

    .e-card .e-card-content {
        padding-top: 0px;
    }

    #date_label {
        display: block;
        width: 248px;
        color: rgba(0, 0, 0, 0.58);
        margin-left: 5px;
    }

    .control_wrapper {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
    }

    #calender-control {
        max-width: 300px;
        margin: 0 auto;
    }

    #display_date {
        max-width: 300px;
        margin: 0 auto;
        padding-top: 10px;
        color: rgba(0, 0, 0, 0.8);
    }
</style>
    @code{
    List<TreeItem> TreeDataSource = new List<TreeItem>();
    
    int HorizontalSpacing = 20;
    int VerticalSpacing = 20;
    public PageOrientation orientation = PageOrientation.Landscape;
    public BoundaryConstraints boundaryConstraints = BoundaryConstraints.Page;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "01",
            NodeText = "Local Disk (C:)",
            Expanded = true,
            Child = new List<TreeItem>()
        {
                new TreeItem { NodeId = "01-01", NodeText = "Program Files",
                    Child = new List<TreeItem>()
                {
                        new TreeItem { NodeId = "01-01-01", NodeText = "Windows NT" },
                        new TreeItem { NodeId = "01-01-02", NodeText = "Windows Mail" },
                        new TreeItem { NodeId = "01-01-03", NodeText = "Windows Photo Viewer" }
                    },
                },
                new TreeItem { NodeId = "01-02", NodeText = "Users", Expanded = true,
                    Child = new List<TreeItem>()
                {
                        new TreeItem { NodeId = "01-02-01", NodeText = "Smith" },
                        new TreeItem { NodeId = "01-02-02", NodeText = "Public" },
                        new TreeItem { NodeId = "01-02-03", NodeText = "Admin" },
                    },
                },
                new TreeItem { NodeId = "01-03", NodeText = "Windows",
                    Child = new List<TreeItem>()
                {
                        new TreeItem { NodeId = "01-03-01", NodeText = "Boot" },
                        new TreeItem { NodeId = "01-03-02", NodeText = "FileManager" },
                        new TreeItem { NodeId = "01-03-03", NodeText = "System32" },
                    }
                },
            },
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "02",
            NodeText = "Local Disk (D:)",
            Child = new List<TreeItem>()
        {
                new TreeItem { NodeId = "02-01", NodeText = "Personals",
                    Child = new List<TreeItem>()
                {
                        new TreeItem { NodeId = "02-01-01", NodeText = "My photo.png" },
                        new TreeItem { NodeId = "02-01-02", NodeText = "Rental document.docx" },
                        new TreeItem { NodeId = "02-01-03", NodeText = "Pay slip.pdf" },
                    },
                },
                new TreeItem { NodeId = "02-02", NodeText = "Projects",
                    Child = new List<TreeItem>()
                {
                        new TreeItem { NodeId = "02-02-01", NodeText = "ASP Application " },
                        new TreeItem { NodeId = "02-02-02", NodeText = "TypeScript Application" },
                        new TreeItem { NodeId = "02-02-03", NodeText = "React Application" },
                    }
                },
                new TreeItem { NodeId = "02-03", NodeText = "Office",
                    Child = new List<TreeItem>()
                {
                        new TreeItem { NodeId = "02-03-01", NodeText = "Work details.docx " },
                        new TreeItem { NodeId = "02-03-02", NodeText = "Weekly report.docx" },
                        new TreeItem { NodeId = "02-03-03", NodeText = "Wish list.csv" },
                    }
                },
            },
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "03",
            NodeText = "Local Disk (E:)",
            Child = new List<TreeItem>()
        {
                new TreeItem { NodeId = "03-01", NodeText = "Pictures",
                    Child = new List<TreeItem>()
                {
                        new TreeItem { NodeId = "03-01-01", NodeText = "Wind.jpg " },
                        new TreeItem { NodeId = "03-01-02", NodeText = "Stone.jpg" },
                        new TreeItem { NodeId = "03-01-03", NodeText = "Home.jpg" },
                    }
                },
                new TreeItem { NodeId = "03-02", NodeText = "Documents", Icon = "docx",
                    Child = new List<TreeItem>()
                {
                        new TreeItem { NodeId = "03-02-01", NodeText = "Environment Pollution.docx " },
                        new TreeItem { NodeId = "03-02-02", NodeText = "Global Warming.ppt" },
                        new TreeItem { NodeId = "03-02-03", NodeText = "Social Network.pdf" },
                    },
                },
                new TreeItem { NodeId = "03-03", NodeText = "Study Materials",
                    Child = new List<TreeItem>()
                {
                        new TreeItem { NodeId = "03-03-01", NodeText = "UI-Guide.pdf" },
                        new TreeItem { NodeId = "03-03-02", NodeText = "Tutorials.zip" },
                        new TreeItem { NodeId = "03-03-03", NodeText = "TypeScript.7z" },
                    }
                },
            },
        });

        
    }
    class TreeItem
    {
        public string NodeId { get; set; }
        public string NodeText { get; set; }
        public string Icon { get; set; }
        public bool Expanded { get; set; }
        public bool Selected { get; set; }
        public List<TreeItem> Child { get; set; }
    }
    public DateTime? DropVal { get; set; } = DateTime.Now;
    public string[] ShapePropertyPath = { "continent" };
    public string ShapeDataPath = "Continent";
    public class MapDataSource
    {
        public string Continent { get; set; }
        public string Color { get; set; }
    };
    public List<MapDataSource> MapsLayerDataSource = new List<MapDataSource> {
        new MapDataSource { Continent="North America", Color="#71B081" },
        new MapDataSource { Continent="South America", Color="#5A9A77" },
        new MapDataSource { Continent="Africa", Color="#498770" },
        new MapDataSource { Continent="Europe", Color="#39776C" },
        new MapDataSource { Continent="Asia", Color="#266665" },
        new MapDataSource { Continent="Australia", Color="#124F5E" }
    };
    public class MapMarkerDataSource
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public string Name { get; set; }
        public string Country { get; set; }
    };
    public List<MapMarkerDataSource> MarkerDataSource = new List<MapMarkerDataSource> {
        new MapMarkerDataSource{ Latitude=37.6276571, Longitude=-122.4276688, Name="San Bruno", Country="United States" },
        new MapMarkerDataSource{ Latitude=33.5302186, Longitude=-117.7418381, Name="Laguna Niguel", Country="United States" },
        new MapMarkerDataSource{ Latitude=40.7424509, Longitude=-74.0081468, Name="New York", Country="United States" },
        new MapMarkerDataSource{ Latitude=-23.5268201, Longitude=-46.6489927, Name="Bom Retiro", Country="Brazil" },
        new MapMarkerDataSource{ Latitude=43.6533855, Longitude=-79.3729994, Name="Toronto", Country="Canada" },
        new MapMarkerDataSource{ Latitude=48.8773406, Longitude=2.3299627, Name="Paris", Country="‎France" },
        new MapMarkerDataSource{ Latitude=52.4643089, Longitude=13.4107368, Name="Berlin", Country="Germany" },
        new MapMarkerDataSource{ Latitude=19.1555762, Longitude=72.8849595, Name="Mumbai", Country="India" },
        new MapMarkerDataSource{ Latitude=35.6628744, Longitude=139.7345469, Name="Minato", Country="Japan" },
        new MapMarkerDataSource{ Latitude=51.5326602, Longitude=-0.1262422, Name="London", Country="England" }
    };

    //public System.Type model = typeof(Node);
    /*
    public class Node
    {
        public string Id { get; set; }
        public double Width { get; set; }
    }
    */
    DiagramObjectCollection<Connector> Connectors = new DiagramObjectCollection<Connector>();
    //ObservableCollection<DiagramConnector> Connectors = new ObservableCollection<DiagramConnector>()

    Connector Connector1 = new Connector()
        { 
            ID = "connector1",
            SourceID="node1",
            TargetID="node2"
        };
    Connector Connector2 = new Connector()
        { 
            ID = "connector2",
            SourceID="node1",
            TargetID="node3"
        };
    Connector Connector3 = new Connector()
        { 
            ID = "connector3",
            SourceID="node1",
            TargetID="node4"
        };
    Connector Connector4 = new Connector()
        { 
            ID = "connector4",
            SourceID="node1",
            TargetID="node5"
        };

    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    Syncfusion.Blazor.Diagram.Node node1 = new Node()
        {
            ID = "node1",
            //Size of the node
            Height = 400,
            Width = 400,
            //Position of the node
            OffsetX = 400,
            OffsetY = 100,
            //sets the type of the shape as HTML
            Shape = new ImageShape()
            {
                Type = NodeShapes.Image,
                Source = "https://www.jitterbit.com/app/uploads/2021/04/ERP-blog-header-2.jpg",

            }
        };
    Syncfusion.Blazor.Diagram.Node node2 = new Node()
        {
            ID = "node2",
            //Size of the node
            Height = 300,
            Width = 300,
            //Position of the node
            OffsetX = 400,
            OffsetY = 100,
            //sets the type of the shape as HTML
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            }
        };
    Syncfusion.Blazor.Diagram.Node node3 = new Node()
        {
            ID = "node3",
            //Size of the node
            Height = 350,
            Width = 350,
            //Position of the node
            OffsetX = 400,
            OffsetY = 100,
            //sets the type of the shape as HTML
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            }
        };
    Syncfusion.Blazor.Diagram.Node node4 = new Node()
        {
            ID = "node4",
            //Size of the node
            Height = 300,
            Width = 300,
            //Position of the node
            OffsetX = 400,
            OffsetY = 100,
            //sets the type of the shape as HTML
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            }
        };
    Syncfusion.Blazor.Diagram.Node node5 = new Node()
        {
            ID = "node5",
            //Size of the node
            Height = 400,
            Width = 750,
            //Position of the node
            OffsetX = 400,
            OffsetY = 100,
            //sets the type of the shape as HTML
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            }
        };

}